package question.binary_tree;public class LongestPathLength {    private static int depthLength(TreeNode root) {        if (root == null) {            return 0;        }        int left = depthLength(root.left);        int right = depthLength(root.right);        return Math.max(left, right) + 1;    }    private static int longest(TreeNode root) {        if (root == null) {            return 0;        }        int maxLength = depthLength(root.right) + depthLength(root.left);        return Math.max(maxLength, Math.max(longest(root.left), longest(root.right)));    }    public static void main(String[] args) {        TreeNode treeNode = new TreeNode(1);        TreeNode left = new TreeNode(2);        TreeNode right = new TreeNode(5);        right.left = new TreeNode(6);        left.left = new TreeNode(3);        left.right = new TreeNode(4);        left.right.left = new TreeNode(7);        treeNode.left = left;        //treeNode.right = right;        System.out.println(longest(treeNode));        //System.out.println(TreeDepth(treeNode));    }}